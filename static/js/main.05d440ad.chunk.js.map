{"version":3,"sources":["utils/interfaces.ts","components/Direction/DirectionLink.tsx","components/Direction/Direction.tsx","utils/actionTypes.ts","reducers/sortReducer.ts","reducers/fetchFlights.ts","reducers/fetchFlight.ts","reducers/index.ts","api/index.ts","actions/fetchDataActions.ts","actions/sortActions.ts","utils/statusFlight.ts","components/VisibleFlights/FlightDetailsLink.tsx","components/VisibleFlights/Flight.tsx","components/VisibleFlights/VisibleFlights.tsx","components/FlightDate/DateLink.tsx","components/FlightDate/FlightDate.tsx","components/SearchField/SearchField.tsx","components/App.tsx","components/FlightDetails/FlightDetails.tsx","index.tsx"],"names":["DirectionTypes","DirectionLink","children","location","useLocation","searchParams","URLSearchParams","search","date","get","query","className","activeClassName","isActive","pathname","includes","to","toString","Direction","ActionTypes","initialState","filteredQuery","flights","arrival","departure","direction","fetching","flight","rootReducer","combineReducers","fetchFlights","state","action","type","REQUESTING_FLIGHTS","RECEIVED_FLIGHTS","preparedDate","split","reverse","join","currentDay","Date","getDate","body","filter","flightDay","timeToStand","sort","a","b","parse","timeDepExpectCalc","sortReducer","SET_FILTERED_QUERY","fetchFlight","REQUESTING_FLIGHT","RECEIVED_FLIGHT","getFetching","fromFetchFlights","getFlight","fromFetchFlight","getVisibleFlights","createSelector","fromSort","pattern","RegExp","DEPARTURE","test","codeShareData","codeShare","airline","en","name","ARRIVAL","API_URL","delay","ms","Promise","resolve","setTimeout","getData","url","fetch","response","json","data","getFlightsFromServer","getFlightFromServer","id","receivedFlights","receivedFlight","setFilteredQuery","statusFlight","status","FlightDetailsLink","flightId","currentDate","toLocaleDateString","isArrival","undefined","timeLandCalc","Flight","term","actual","localTime","actualTime","destination","toTimeString","toLocaleTimeString","hour","minute","timeTakeofFact","preparedLocalTime","leaveTo","classNames","blue","ID","connector","connect","loadFlights","dispatch","params","useParams","useEffect","console","log","thList","map","head","i","key","length","DateLink","setDateParams","calendarDate","selectedDate","onClick","reverseDate","stringifyDate","month","day","replace","FlightDate","history","useHistory","useState","handleDateChange","getDateToParams","setDate","set","push","selected","onChange","customInput","readOnly","value","visibleQuery","setVisibleQuery","handleButtonQueryUpdate","delete","placeholder","event","target","onKeyDown","App","loadFlight","stand","gate","checkinNo","gateNo","slice","preparedFullDate","flightNumber","flightStatus","flightInfoHeaders","Time","Terminal","Gate","Stand","flightInfoList","Object","entries","header","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","exact","path","component","FlightDetails","document","getElementById"],"mappings":"yLAEYA,E,yDC4BGC,EAvBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5BC,EAAWC,cACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAC5CC,EAAOH,EAAaI,IAAI,SAAW,GACnCC,EAAQL,EAAaI,IAAI,UAAY,GAE3C,OACE,kBAAC,IAAD,CACEE,UAAU,oBACVC,gBAAgB,2BAChBC,SAAU,WACR,QAAIV,EAASW,SAASC,SAASb,IAKjCc,GAAE,WAAMd,GAAN,OAAiBM,GAAQE,EAAR,WAAoBL,EAAaY,YAAe,KAElEf,ICZQgB,G,MATO,WACpB,OACE,yBAAKP,UAAU,gBACb,kBAAC,EAAD,mBACA,kBAAC,EAAD,oB,kBFNMX,K,kBAAAA,E,uBAAAA,M,SGIAmB,E,kCAAAA,K,wCAAAA,E,sCAAAA,E,oCAAAA,E,kCAAAA,E,yCAAAA,M,KCHZ,IAAMC,EAAe,CACnBC,cAAe,ICDXD,EAA8B,CAClCE,QAAS,CAAEC,QAAS,GAAIC,UAAW,IACnCC,UAAW,KACXC,UAAU,GCHNN,EAA6B,CACjCO,OAAQ,KACRD,UAAU,G,QCECE,EAAcC,0BAAgB,CACzCC,aFCa,WAA2D,IAA1DC,EAAyD,uDAAlCX,EAAcY,EAAoB,uCACvE,OAAQA,EAAOC,MACb,KAAKd,EAAYe,mBACf,OAAO,eAAKH,EAAZ,CAAmBL,UAAU,IAE/B,KAAKP,EAAYgB,iBAAjB,IACUb,EAA6BU,EAA7BV,QAASG,EAAoBO,EAApBP,UAAWjB,EAASwB,EAATxB,KACtB4B,EAAe5B,EAAK6B,MAAM,KAAKC,UAAUC,KAAK,KAC9CC,EAAa,IAAIC,KAAKL,GAAcM,UAC1C,OAAO,eACFX,EADL,CAEET,QAAS,CACPC,QAAS,YAAID,EAAQqB,KAAKpB,SACvBqB,QAAO,SAACjB,GACP,IAAMkB,EAAY,IAAIJ,KAAKd,EAAOmB,aAAaJ,UAE/C,OAAOF,IAAeK,KAEvBE,MAAK,SAACC,EAAGC,GACR,OAAOR,KAAKS,MAAMF,EAAEF,aAAeL,KAAKS,MAAMD,EAAEH,gBAEpDtB,UAAW,YAAIF,EAAQqB,KAAKnB,WACzBoB,QAAO,SAACjB,GACP,IAAMkB,EAAY,IAAIJ,KAAKd,EAAOwB,mBAAmBT,UAErD,OAAOF,IAAeK,KAEvBE,MAAK,SAACC,EAAGC,GACR,OACER,KAAKS,MAAMF,EAAEG,mBACbV,KAAKS,MAAMD,EAAEE,uBAIrB1B,YACAC,UAAU,IAGd,QACE,OAAOK,IEvCXqB,YHFa,WAAmD,IAAlDrB,EAAiD,uDAAlCX,EAAcY,EAAoB,uCAC/D,OAAQA,EAAOC,MACb,KAAKd,EAAYkC,mBACf,OAAO,eAAKtB,EAAZ,CAAmBV,cAAeW,EAAOX,gBAE3C,QACE,OAAOU,IGHXuB,YDFa,WAA0D,IAAzDvB,EAAwD,uDAAlCX,EAAcY,EAAoB,uCACtE,OAAQA,EAAOC,MACb,KAAKd,EAAYoC,kBACf,OAAO,eAAKxB,EAAZ,CAAmBL,UAAU,IAE/B,KAAKP,EAAYqC,gBAAjB,IACU7B,EAAWK,EAAXL,OACR,OAAO,eACFI,EADL,CAEEJ,OAAO,eAAMA,EAAOgB,MACpBjB,UAAU,IAGd,QACE,OAAOK,MCNA0B,EAAc,SAAC1B,GAAD,OFsCA,SAACA,GAAD,OAA0BA,EAAML,SErCzDgC,CAA6B3B,EAAMD,eAIxB6B,EAAY,SAAC5B,GAAD,ODMA,SAACA,GAAD,OAAyBA,EAAMJ,OCLtDiC,CAA0B7B,EAAMuB,cAOrBO,EAAoBC,YAC/B,CAhBwB,SAAC/B,GAAD,OFuCA,SAACA,GAAD,OAA0BA,EAAMT,QEtCxDoC,CAA4B3B,EAAMD,eAGR,SAACC,GAAD,OFqCA,SAACA,GAAD,OAA0BA,EAAMN,UEpC1DiC,CAA8B3B,EAAMD,eAON,SAACC,GAAD,OHRA,SAACA,GAAD,OAAkBA,EAAMV,cGStD0C,CAA0BhC,EAAMqB,gBAIhC,SAAC9B,EAASG,EAAWJ,GACnB,IAAM2C,EAAU,IAAIC,OAAO5C,EAAe,KAE1C,OAAII,IAAczB,EAAekE,UACxB,YACF5C,EAAQE,UAAUoB,QACnB,SAACjB,GAAD,OACEqC,EAAQG,KAAKxC,EAAOyC,cAAc,GAAGC,YACrCL,EAAQG,KAAKxC,EAAO,yBACpBqC,EAAQG,KAAKxC,EAAO2C,QAAQC,GAAGC,UAG5B/C,IAAczB,EAAeyE,QAC/B,YACFnD,EAAQC,QAAQqB,QACjB,SAACjB,GAAD,OACEqC,EAAQG,KAAKxC,EAAOyC,cAAc,GAAGC,YACrCL,EAAQG,KAAKxC,EAAO,2BACpBqC,EAAQG,KAAKxC,EAAO2C,QAAQC,GAAGC,UAKhC,M,wBCpDLE,EAAU,oCACHC,EAAQ,SAACC,GAAD,OACnB,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAEzCI,EAAO,uCAAG,WAAUC,GAAV,iBAAAjC,EAAA,sEACSkC,MAAMD,GADf,cACRE,EADQ,gBAEKA,EAASC,OAFd,cAERC,EAFQ,yBAIPA,GAJO,2CAAH,sDAOAC,EAAoB,uCAAG,WAAO9E,GAAP,SAAAwC,EAAA,sEAC5B2B,EAAM,KADsB,gCAE3BK,EAAO,UAAcN,GAAd,OAAwBlE,KAFJ,2CAAH,sDAKpB+E,EAAmB,uCAAG,WAAO/E,EAAcgF,GAArB,SAAAxC,EAAA,+EAC1BgC,EAAO,UAAaN,GAAb,OAAuBlE,EAAvB,YAA+BgF,KADZ,2CAAH,wDCN1BC,EAAkB,SACtBnE,EACAG,EACAjB,GAHsB,MAIT,CACbyB,KAAMd,EAAYgB,iBAClBb,UACAG,YACAjB,SAeIkF,EAAiB,SAAC/D,GAAD,MAA+B,CACpDM,KAAMd,EAAYqC,gBAClB7B,WC9BIgE,EAAmB,SAACtE,GAAD,MAAqC,CAC5DY,KAAMd,EAAYkC,mBAClBhC,kB,iBCTWuE,EAAe,SAACC,GAC3B,OAAQA,GACN,IAAK,KACH,MAAO,UACT,IAAK,KACH,MAAO,WACT,IAAK,KACH,MAAO,SACT,IAAK,KACH,MAAO,WACT,IAAK,KACH,MAAO,YACT,IAAK,KACH,MAAO,WACT,IAAK,KACH,MAAO,WACT,IAAK,KACH,MAAO,eACT,IAAK,KACH,MAAO,cACT,QACE,OAAOA,ICFEC,EAZsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChC5F,EAAWC,cACXU,EAAWX,EAASW,SACpBT,EAAe,IAAIC,gBAAgBH,EAASI,QAC5CyF,GAAc,IAAIvD,MAAOwD,qBAAqB5D,MAAM,KAAKE,KAAK,KAC9D/B,EAAOH,EAAaI,IAAI,SAAWuF,EAEzC,OACE,kBAAC,IAAD,CAAShF,GAAE,UAAKF,EAAL,YAAiBiF,EAAjB,eAAgCvF,IAA3C,mBCHG,SAAS0F,EAAUvE,GACxB,YAA4CwE,IAApCxE,EAAmByE,aAG7B,IAyEeC,EAzEW,SAAC,GAA0B,IAAxB1E,EAAuB,EAAvBA,OAAQD,EAAe,EAAfA,SAC3B4E,EAAiD3E,EAAjD2E,KAAMT,EAA2ClE,EAA3CkE,OAAQvB,EAAmC3C,EAAnC2C,QAASF,EAA0BzC,EAA1ByC,cAAemC,EAAW5E,EAAX4E,OAC1CC,EAAY,GACdC,EAAa,GACbC,EAAc,GAEVC,EAAe,SAACnG,GACpB,OAAO,IAAIiC,KAAKjC,GAAMoG,mBAAmB,GAAI,CAC3CC,KAAM,UACNC,OAAQ,aAIRZ,EAAUvE,IACZ6E,EAAY7E,EAAOmB,YACnB4D,EAAc/E,EAAO,yBAEN,OAAXkE,IACFY,EAAaE,EAAaJ,MAG5BC,EAAY7E,EAAOwB,kBACnBuD,EAAc/E,EAAO,uBAEjBA,EAAOoF,gBAA6B,OAAXlB,IAC3BY,EAAaE,EAAahF,EAAOoF,kBAGrC,IAAMC,EAAoBL,EAAaH,GAEjCrG,EAAWC,cAEXM,EADe,IAAIJ,gBAAgBH,EAASI,QACvBE,IAAI,UAAY,GACvCwG,GAAU,EACd,GAAIvG,EAAO,CACT,IAAMsD,EAAU,IAAIC,OAAOvD,EAAO,KAClCuG,IACEjD,EAAQG,KAAKC,EAAc,GAAGC,YAC9BL,EAAQG,KAAKuC,IACb1C,EAAQG,KAAKG,EAAQC,GAAGC,OAK5B,OACE,wBACE7D,UAAWuG,IAAW,CACpB,kCAAmCxF,GAAYuF,KAGjD,wBACEtG,UAAWuG,IAAW,8BAA+B,CACnDC,KAAe,MAATb,KAGR,8BAAOA,IAET,wBAAI3F,UAAU,6BAA6BqG,GAC3C,wBAAIrG,UAAU,kCAAkC+F,GAChD,wBAAI/F,UAAU,6BAAd,UAA8CiF,EAC5CC,GADF,YAEKY,IACL,wBAAI9F,UAAU,8BAA8B2D,EAAQC,GAAGC,MACvD,wBAAI7D,UAAU,6BACXyD,EAAc,GAAGC,WAEpB,wBAAI1D,UAAU,gCACZ,kBAAC,EAAD,CAAmBoF,SAAUpE,EAAOyF,QCX7BC,G,MADGC,aALM,SAACvF,GAAD,MAAuB,CAC7CT,QAASuC,EAAkB9B,GAC3BL,SAAU+B,EAAY1B,MAGmB,CAAEwF,YLhDlB,SAAC/G,EAAciB,GACxC,8CAAO,WAAgB+F,GAAhB,eAAAxE,EAAA,6DACLwE,EAhBsC,CACxCvF,KAAMd,EAAYe,qBAcX,SAGiBoD,EAAqB9E,GAHtC,OAGCc,EAHD,OAILkG,EAAS/B,EAAgBnE,EAASG,EAAWjB,IAJxC,2CAAP,wDKgDa6G,EA9D8C,SAAC,GAIvD,IAHL/F,EAGI,EAHJA,QACAI,EAEI,EAFJA,SACA6F,EACI,EADJA,YAEMpH,EAAWC,cACXqH,EAAgCC,cAChC5G,EACiB,aAArB2G,EAAOhG,UACHzB,EAAeyE,QACM,eAArBgD,EAAOhG,UACPzB,EAAekE,UACf,KACA7D,EAAe,IAAIC,gBAAgBH,EAASI,QAE5CyF,GAAc,IAAIvD,MAAOwD,qBAAqB5D,MAAM,KAAKE,KAAK,KAC9D/B,EAAOH,EAAaI,IAAI,SAAWuF,EAGzC2B,qBAAU,WACRC,QAAQC,IAAI,oBAAqB/G,EAAU,UAAWN,GAEtD+G,EAAY/G,EAAMM,KAEjB,CAACA,EAAUN,IAEd,IAQMsH,EARc,CAClB,WACA,aACA,cACA,SACA,UACA,UAEyBC,KAAI,SAACC,EAAMC,GAAP,OAAa,wBAAIC,IAAKD,GAAID,MACzD,OAAuB,IAAnB1G,EAAQ6G,OAER,2BAAOxH,UAAU,iBACf,+BACE,4BAAKmH,IAEP,+BACIxG,EAAuCyG,KAAI,SAACpG,GAAD,OAC3C,kBAAC,EAAD,CAAQuG,IAAKvG,EAAOyF,GAAIzF,OAAQA,EAAQD,SAAUA,SAO1D,yBAAKf,UAAU,iBACZe,EAAW,yCAAuB,iD,QC3B1B0G,EAvBa,SAAC,GAMtB,IALLC,EAKI,EALJA,cACAC,EAII,EAJJA,aACA9H,EAGI,EAHJA,KACAN,EAEI,EAFJA,SAGMW,EADF,EADJ0H,aAGetC,uBAAyBzF,EAAKyF,qBAE7C,OACE,yBACEtF,UAAWuG,IAAW,qBAAsB,CAC1C,4BAA6BrG,IAE/B2H,QAAS,kBAAMH,EAAc7H,KAE7B,8BAAO8H,EAAa9H,IACnBN,I,6BCtBP,SAASuI,EAAYjI,GACnB,OAAIA,EACK,IAAIiC,KAAKjC,EAAK6B,MAAM,KAAKC,UAAUC,KAAK,MAE1C,IAAIE,KAEb,SAASiG,EAAclI,GACrB,OAAOA,EAAKyF,qBAAqB5D,MAAM,KAAKE,KAAK,KAEnD,SAAS+F,EAAa9H,GACpB,OAAOA,EACJyF,mBAAmB,GAAI,CAAE0C,MAAO,UAAWC,IAAK,YAChDC,QAAQ,IAAK,KAGlB,IA4EeC,EA5EQ,WACrB,IAAM3I,EAAWC,cACX2I,EAAUC,cACV3I,EAAe,IAAIC,gBAAgBH,EAASI,QAHvB,EAIc0I,mBACvCR,EAAYpI,EAAaI,IAAI,UALJ,mBAIpB8H,EAJoB,KAINW,EAJM,KAOrBb,EAAgB,SAAC7H,GACrB0I,EAAiBT,EAAYC,EAAclI,MAEvC2I,EAAkB,SAACP,GACvB,IAAMpI,EAAO,IAAIiC,KAGjB,OAFAjC,EAAK4I,QAAQ5I,EAAKkC,UAAYkG,GAEvBpI,GAcT,OAXAmH,qBAAU,WACR,IAAMnH,EAAOkI,EAAcH,GAC3BlI,EAAagJ,IAAI,OAAQ7I,GACzBuI,EAAQO,KAAK,CACX/I,OAAQF,EAAaY,eAGtB,CAACsH,IAEJX,QAAQC,IAAIU,GAGV,yBAAK5H,UAAU,4BACb,kBAAC,IAAD,CACE4I,SAAUhB,EACViB,SAAU,SAAChJ,GAAD,OAAgB0I,EAAiB1I,IAC3CiJ,YACE,yBAAK9I,UAAU,+BACb,yBAAKA,UAAU,gCACb,2BACEsB,KAAK,OACLyH,UAAQ,EACR/I,UAAU,0BACVgJ,MAAOrB,EAAaC,SAM9B,yBAAK5H,UAAU,uBACb,kBAAC,EAAD,CACE4H,aAAcA,EACdD,aAAcA,EACdD,cAAeA,EACf7H,KAAM2I,GAAiB,IAJzB,aAQA,kBAAC,EAAD,CACEZ,aAAcA,EACdD,aAAcA,EACdD,cAAeA,EACf7H,KAAM2I,EAAgB,IAJxB,SAQA,kBAAC,EAAD,CACEZ,aAAcA,EACdD,aAAcA,EACdD,cAAeA,EACf7H,KAAM2I,EAAgB,IAJxB,eCfO9B,G,OADGC,YAAQ,KAAM,CAAE3B,iBPzDO,SAACtE,GACxC,8CAAO,WAAgBmG,GAAhB,SAAAxE,EAAA,sEACC2B,EAAM,KADP,OAEL6C,EAAS7B,EAAiBtE,IAFrB,2CAAP,wDOyDagG,EAhE2C,SAAC,GAEpD,IADL1B,EACI,EADJA,iBAEMoD,EAAUC,cACV7I,EAAWC,cACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAC5CG,EAAQL,EAAaI,IAAI,UAAY,GAE3CkH,qBAAU,WACRhC,EAAiBjF,KAEhB,CAACA,IATA,MAWoCuI,mBAAiBvI,GAXrD,mBAWGkJ,EAXH,KAWiBC,EAXjB,KA8BEC,EAA0B,WAjBZ,IAACH,KAkBPC,GAhBVvJ,EAAagJ,IAAI,QAASM,GAE1BtJ,EAAa0J,OAAO,SAGtBhB,EAAQO,KAAK,CACX/I,OAAQF,EAAaY,cAazB,OACE,yBAAKN,UAAU,sCACb,wBAAIA,UAAU,uBAAd,iBACA,yBAAKA,UAAU,6BACb,2BACEA,UAAU,sBACVsB,KAAK,OACL+H,YAAY,mCACZL,MAAOC,EACPJ,SAlBkB,SAACS,GAAgD,IACjEN,EAAUM,EAAMC,OAAhBP,MACRE,EAAgBF,IAiBVQ,UAAW,SAACF,GACQ,UAAdA,EAAM/B,KACR4B,OAIN,4BACEnJ,UAAU,uBACV6H,QAASsB,GAFX,gBCxCOM,EAXC,WACd,OACE,yBAAKzJ,UAAU,sBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,iBC+GS0G,I,OADGC,aAHM,SAACvF,GAAD,MAAuB,CAC7CJ,OAAQgC,EAAU5B,MAEuB,CAAEsI,WVnFnB,SAAC7J,EAAcgF,GACvC,8CAAO,WAAgBgC,GAAhB,eAAAxE,EAAA,6DACLwE,EAVqC,CACvCvF,KAAMd,EAAYoC,oBAQX,SAGgBgC,EAAoB/E,EAAMgF,GAH1C,OAGC7D,EAHD,OAIL6F,EAAS9B,EAAe/D,IAJnB,2CAAP,wDUmFa0F,EAhH6C,SAAC,GAGtD,IAFL1F,EAEI,EAFJA,OACA0I,EACI,EADJA,WAEMlK,EAAWC,cACXqH,EAAiBC,cACjB5G,EAAW2G,EAAOhG,UAClBsE,EAAW0B,EAAO1B,SAGlBvF,EAFe,IAAIF,gBAAgBH,EAASI,QAExBE,IAAI,OAAS,GASvC,GAPAkH,qBAAU,WACRC,QAAQC,IAAI,kBAAmB9B,EAAU,UAAWvF,GAEpD6J,EAAW7J,EAAMuF,KAEhB,CAACvF,EAAMuF,IAENpE,EAAQ,CAAC,IACH2E,EAAwC3E,EAAxC2E,KAAMT,EAAkClE,EAAlCkE,OAAQzB,EAA0BzC,EAA1ByC,cAAemC,EAAW5E,EAAX4E,OACjCC,EAAY,GACdC,EAAa,GACbC,EAAc,GACd4D,OAA4BnE,EAC5BoE,OAA2BpE,EAEvBQ,EAAe,SAACnG,GACpB,OAAO,IAAIiC,KAAKjC,GAAMoG,mBAAmB,GAAI,CAC3CC,KAAM,UACNC,OAAQ,aAIRZ,EAAUvE,IACZ6E,EAAY7E,EAAOmB,YACnB4D,EAAc/E,EAAO,yBAEN,OAAXkE,IACFY,EAAaE,EAAaJ,MAG5BC,EAAY7E,EAAOwB,kBACnBuD,EAAc/E,EAAO,uBACrB2I,EAAQ3I,EAAO6I,UACfD,EAAO5I,EAAO8I,OAEV9I,EAAOoF,gBAA6B,OAAXlB,IAC3BY,EAAU,aAASE,EAAahF,EAAOoF,mBAG3C,IAAM3E,EAAe5B,EAAK6B,MAAM,KAAKqI,MAAM,EAAG,GAAGnI,KAAK,KAChDoI,EAAmBnK,EAAK6B,MAAM,KAAKE,KAAK,KACxCyE,EAAoBL,EAAaH,GACjCoE,EAAexG,EAAc,GAAGC,UAChCwG,EAAY,UAAMjF,EAAaC,IAAnB,OAChBY,EAAU,WAAOA,EAAP,aAAsBkE,GAAqB,IAGjDG,EAAoB,CACxBrI,KAAML,EACN2I,KAAM/D,EACNgE,SAAU1E,EACVD,OAAQuE,EACRK,KAAMV,EACNW,MAAOZ,GAEHa,EAGAC,OAAOC,QAAQP,GAClB/C,KAAI,yCAAmB,CACtBuD,OADG,KAEH3B,MAFG,SAIJ/G,QAAO,qBAAG+G,SAEb,OACE,yBAAKhJ,UAAU,qBACb,yBAAKA,UAAU,uBACb,kBAAC,IAAD,CAASK,GAAE,WAAMF,EAAN,iBAAuBN,IAAlC,SAEF,yBAAKG,UAAU,wBACb,yBAAKA,UAAU,yBACb,2BAAIiK,GADN,UAC+B1E,EAAUvE,GAAU,OAAS,MAE5D,yBAAKhB,UAAU,qBAAqB+F,GACpC,yBAAK/F,UAAU,iBAAf,uBACA,yBAAKA,UAAU,mBACb,4BACGwK,EAAepD,KAAI,gBAAGuD,EAAH,EAAGA,OAAQ3B,EAAX,EAAWA,MAAX,OAClB,wBAAIzB,IAAKoD,GACP,uBAAG3K,UAAU,yBAAyB2K,GACtC,uBAAG3K,UAAU,yBACX,2BAAIgJ,UAMd,yBAAKhJ,UAAU,kBAAkBkK,KAKzC,OAAO,6CC1GHU,GAAQC,sBACZ5J,EACA6J,+BAAoBC,0BAAgBC,OAGtCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,cAAcC,UAAW7B,IAC3C,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,wBAAwBC,UAAWC,SAK7DC,SAASC,eAAe,U","file":"static/js/main.05d440ad.chunk.js","sourcesContent":["import { Body, Departure, Arrival } from './flightsTypes';\n\nexport enum DirectionTypes {\n  ARRIVAL = 'arrival',\n  DEPARTURE = 'departure',\n}\n\nexport type IDirection =\n  | typeof DirectionTypes.ARRIVAL\n  | typeof DirectionTypes.DEPARTURE\n  | null;\n\nexport interface ISort {\n  filteredQuery: string;\n}\n\nexport interface IFetchFlights {\n  flights: Body;\n  direction: IDirection;\n  fetching: boolean;\n}\n\nexport interface IFetchFlight {\n  flight: Arrival | Departure | null;\n  fetching: boolean;\n}\n\nexport interface RootState {\n  sortReducer: ISort;\n  fetchFlights: IFetchFlights;\n  fetchFlight: IFetchFlight;\n}\n","import React, { FC } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\ntype Props = {\n  children: string;\n};\n\nconst DirectionLink: FC<Props> = ({ children }) => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const date = searchParams.get('date') || '';\n  const query = searchParams.get('query') || '';\n\n  return (\n    <NavLink\n      className=\"flights-tabs__tab\"\n      activeClassName=\"flights-tabs__tab_active\"\n      isActive={() => {\n        if (location.pathname.includes(children)) {\n          return true;\n        }\n        return false;\n      }}\n      to={`/${children}${date || query ? `?${searchParams.toString()}` : ''}`}\n    >\n      {children}\n    </NavLink>\n  );\n};\n\nexport default DirectionLink;\n","import React, { FC } from 'react';\nimport DirectionLink from './DirectionLink';\nimport './Direction.scss';\n\nconst Direction: FC = () => {\n  return (\n    <div className=\"flights-tabs\">\n      <DirectionLink>departures</DirectionLink>\n      <DirectionLink>arrivals</DirectionLink>\n    </div>\n  );\n};\n\nexport default Direction;\n","import { IFlights, IFlight } from './flightsTypes';\nimport { IDirection } from './interfaces';\n\n/*\n * action types\n */\nexport enum ActionTypes {\n  REQUESTING_FLIGHTS = 'REQUESTING_FLIGHTS',\n  REQUESTING_FLIGHT = 'REQUESTING_FLIGHT',\n  RECEIVED_FLIGHTS = 'RECEIVED_FLIGHTS',\n  RECEIVED_FLIGHT = 'RECEIVED_FLIGHT',\n  SET_FILTERED_QUERY = 'SET_FILTERED_QUERY',\n}\n/*\n * actions\n */\ninterface RequestingFlightsAction {\n  type: typeof ActionTypes.REQUESTING_FLIGHTS;\n}\ninterface RequestingFlightAction {\n  type: typeof ActionTypes.REQUESTING_FLIGHT;\n}\ninterface ReceivedFlightsAction {\n  type: typeof ActionTypes.RECEIVED_FLIGHTS;\n  flights: IFlights;\n  direction: IDirection;\n  date: string;\n}\ninterface ReceivedFlightAction {\n  type: typeof ActionTypes.RECEIVED_FLIGHT;\n  flight: IFlight;\n}\ninterface SetFilteredQueryAction {\n  type: typeof ActionTypes.SET_FILTERED_QUERY;\n  filteredQuery: string;\n}\n\nexport type Actions =\n  | RequestingFlightsAction\n  | RequestingFlightAction\n  | ReceivedFlightsAction\n  | ReceivedFlightAction\n  | SetFilteredQueryAction;\n","import { ISort } from '../utils/interfaces';\nimport { Actions, ActionTypes } from '../utils/actionTypes';\n\nconst initialState = {\n  filteredQuery: ''\n};\n\nexport default (state: ISort = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.SET_FILTERED_QUERY:\n      return { ...state, filteredQuery: action.filteredQuery };\n\n    default:\n      return state;\n  }\n};\n\n//selectors\nexport const getFilteredQuery = (state: ISort) => state.filteredQuery;","import { Actions, ActionTypes } from '../utils/actionTypes';\nimport { IFetchFlights } from '../utils/interfaces';\n\nconst initialState: IFetchFlights = {\n  flights: { arrival: [], departure: [] },\n  direction: null,\n  fetching: false,\n};\n\nexport default (state: IFetchFlights = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.REQUESTING_FLIGHTS:\n      return { ...state, fetching: true };\n\n    case ActionTypes.RECEIVED_FLIGHTS:\n      const { flights, direction, date } = action;\n      const preparedDate = date.split('-').reverse().join('-');\n      const currentDay = new Date(preparedDate).getDate();\n      return {\n        ...state,\n        flights: {\n          arrival: [...flights.body.arrival]\n            .filter((flight) => {\n              const flightDay = new Date(flight.timeToStand).getDate();\n\n              return currentDay === flightDay;\n            })\n            .sort((a, b) => {\n              return Date.parse(a.timeToStand) - Date.parse(b.timeToStand);\n            }),\n          departure: [...flights.body.departure]\n            .filter((flight) => {\n              const flightDay = new Date(flight.timeDepExpectCalc).getDate();\n\n              return currentDay === flightDay;\n            })\n            .sort((a, b) => {\n              return (\n                Date.parse(a.timeDepExpectCalc) -\n                Date.parse(b.timeDepExpectCalc)\n              );\n            }),\n        },\n        direction,\n        fetching: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\n//selector\nexport const getFlights = (state: IFetchFlights) => state.flights;\nexport const getFetching = (state: IFetchFlights) => state.fetching;\nexport const getDirection = (state: IFetchFlights) => state.direction;\n","import { Actions, ActionTypes } from '../utils/actionTypes';\nimport { IFetchFlight } from '../utils/interfaces';\n\nconst initialState: IFetchFlight = {\n  flight: null,\n  fetching: false,\n};\n\nexport default (state: IFetchFlight = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.REQUESTING_FLIGHT:\n      return { ...state, fetching: true };\n\n    case ActionTypes.RECEIVED_FLIGHT:\n      const { flight } = action;\n      return {\n        ...state,\n        flight: { ...flight.body },\n        fetching: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\n//selector\nexport const getFlight = (state: IFetchFlight) => state.flight;\nexport const getFetching = (state: IFetchFlight) => state.fetching;\n","import { RootState, DirectionTypes } from '../utils/interfaces';\nimport { createSelector } from 'reselect';\nimport sortReducer, * as fromSort from './sortReducer';\nimport fetchFlights, * as fromFetchFlights from './fetchFlights';\nimport fetchFlight, * as fromFetchFlight from './fetchFlight';\nimport { combineReducers } from 'redux';\n\nexport const rootReducer = combineReducers({\n  fetchFlights,\n  sortReducer,\n  fetchFlight,\n});\n\n//selector\nexport const getFlights = (state: RootState) =>\n  fromFetchFlights.getFlights(state.fetchFlights);\nexport const getFetching = (state: RootState) =>\n  fromFetchFlights.getFetching(state.fetchFlights);\nexport const getDirection = (state: RootState) =>\n  fromFetchFlights.getDirection(state.fetchFlights);\n\nexport const getFlight = (state: RootState) =>\n  fromFetchFlight.getFlight(state.fetchFlight);\nexport const getFlightFetching = (state: RootState) =>\n  fromFetchFlight.getFetching(state.fetchFlight);\n\nexport const getFilteredQuery = (state: RootState) =>\n  fromSort.getFilteredQuery(state.sortReducer);\n\nexport const getVisibleFlights = createSelector(\n  [getFlights, getDirection, getFilteredQuery],\n  (flights, direction, filteredQuery) => {\n    const pattern = new RegExp(filteredQuery, 'i');\n\n    if (direction === DirectionTypes.DEPARTURE) {\n      return [\n        ...flights.departure.filter(\n          (flight) =>\n            pattern.test(flight.codeShareData[0].codeShare) ||\n            pattern.test(flight['airportToID.city_en']) ||\n            pattern.test(flight.airline.en.name)\n        ),\n      ];\n    } else if (direction === DirectionTypes.ARRIVAL) {\n      return [\n        ...flights.arrival.filter(\n          (flight) =>\n            pattern.test(flight.codeShareData[0].codeShare) ||\n            pattern.test(flight['airportFromID.city_en']) ||\n            pattern.test(flight.airline.en.name)\n        ),\n      ];\n    }\n\n    return [];\n  }\n);\n","import { IFlights, IFlight } from '../utils/flightsTypes';\n\nconst API_URL = 'https://api.iev.aero/api/flights/';\nexport const delay = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n\nexport const getFlightsFromServer = async (date: string) => {\n  await delay(1000);\n  return getData<IFlights>(`${API_URL}${date}`);\n};\n\nexport const getFlightFromServer = async (date: string, id: string) => {\n  return getData<IFlight>(`${API_URL}${date}/${id}`);\n};\n","import { Actions, ActionTypes } from '../utils/actionTypes';\nimport { IFlights, IFlight } from '../utils/flightsTypes';\nimport { Dispatch } from 'react';\nimport { getFlightsFromServer, getFlightFromServer } from '../api';\nimport { IDirection } from '../utils/interfaces';\n\n/*\n * action creators\n */\nconst requestingFlights = (): Actions => ({\n  type: ActionTypes.REQUESTING_FLIGHTS,\n});\nconst receivedFlights = (\n  flights: IFlights,\n  direction: IDirection,\n  date: string\n): Actions => ({\n  type: ActionTypes.RECEIVED_FLIGHTS,\n  flights,\n  direction,\n  date,\n});\n\nexport const loadFlights = (date: string, direction: IDirection) => {\n  return async function (dispatch: Dispatch<Actions>) {\n    dispatch(requestingFlights());\n\n    const flights = await getFlightsFromServer(date);\n    dispatch(receivedFlights(flights, direction, date));\n  };\n};\n\nconst requestingFlight = (): Actions => ({\n  type: ActionTypes.REQUESTING_FLIGHT,\n});\nconst receivedFlight = (flight: IFlight): Actions => ({\n  type: ActionTypes.RECEIVED_FLIGHT,\n  flight,\n});\n\nexport const loadFlight = (date: string, id: string) => {\n  return async function (dispatch: Dispatch<Actions>) {\n    dispatch(requestingFlight());\n\n    const flight = await getFlightFromServer(date, id);\n    dispatch(receivedFlight(flight));\n  };\n};\n","import { ActionTypes, Actions } from '../utils/actionTypes';\nimport { Dispatch } from 'react';\nimport { delay } from '../api';\n\n/*\n * action creators\n */\nconst setFilteredQuery = (filteredQuery: string): Actions => ({\n  type: ActionTypes.SET_FILTERED_QUERY,\n  filteredQuery,\n});\n\nexport const setFilteredQueryWithDelay = (filteredQuery: string) => {\n  return async function (dispatch: Dispatch<Actions>) {\n    await delay(1000);\n    dispatch(setFilteredQuery(filteredQuery));\n  };\n};\n","export const statusFlight = (status: IStatus): string => {\n  switch (status) {\n    case 'ON':\n      return 'On time';\n    case 'CX':\n      return 'Canceled';\n    case 'LN':\n      return 'Landed';\n    case 'CK':\n      return 'Check-in';\n    case 'FR':\n      return 'In flight';\n    case 'BD':\n      return 'Boarding';\n    case 'DP':\n      return 'Departed';\n    case 'DV':\n      return 'Route change';\n    case 'GC':\n      return 'Gate closed';\n    default:\n      return status;\n  }\n};\n","import React, { FC } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\ntype Props = {\n  flightId: number;\n};\n\nconst FlightDetailsLink: FC<Props> = ({ flightId }) => {\n  const location = useLocation();\n  const pathname = location.pathname;\n  const searchParams = new URLSearchParams(location.search);\n  const currentDate = new Date().toLocaleDateString().split('.').join('-');\n  const date = searchParams.get('date') || currentDate;\n\n  return (\n    <NavLink to={`${pathname}/${flightId}?dt=${date}`}>Flight Details</NavLink>\n  );\n};\n\nexport default FlightDetailsLink;\n","import React, { FC } from 'react';\nimport { Arrival, Departure } from '../../utils/flightsTypes';\nimport classNames from 'classnames';\nimport { statusFlight } from '../../utils/statusFlight';\nimport FlightDetailsLink from './FlightDetailsLink';\nimport { useLocation } from 'react-router-dom';\n\ntype Props = {\n  flight: Arrival | Departure;\n  fetching: boolean;\n};\n\nexport function isArrival(flight: Arrival | Departure): flight is Arrival {\n  return (flight as Arrival).timeLandCalc !== undefined;\n}\n\nconst Flight: FC<Props> = ({ flight, fetching }) => {\n  const { term, status, airline, codeShareData, actual } = flight;\n  let localTime = '',\n    actualTime = '',\n    destination = '';\n\n  const toTimeString = (date: string) => {\n    return new Date(date).toLocaleTimeString([], {\n      hour: 'numeric',\n      minute: '2-digit',\n    });\n  };\n\n  if (isArrival(flight)) {\n    localTime = flight.timeToStand;\n    destination = flight['airportFromID.city_en'];\n\n    if (status === 'LN') {\n      actualTime = toTimeString(actual);\n    }\n  } else {\n    localTime = flight.timeDepExpectCalc;\n    destination = flight['airportToID.city_en'];\n\n    if (flight.timeTakeofFact && status === 'DP') {\n      actualTime = toTimeString(flight.timeTakeofFact);\n    }\n  }\n  const preparedLocalTime = toTimeString(localTime);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n  let leaveTo = false;\n  if (query) {\n    const pattern = new RegExp(query, 'i');\n    leaveTo =\n      pattern.test(codeShareData[0].codeShare) ||\n      pattern.test(destination) ||\n      pattern.test(airline.en.name)\n        ? false\n        : true;\n  }\n\n  return (\n    <tr\n      className={classNames({\n        'list-leave-active list-leave-to': fetching || leaveTo,\n      })}\n    >\n      <td\n        className={classNames('flights-table__terminal-col', {\n          blue: term === 'D',\n        })}\n      >\n        <span>{term}</span>\n      </td>\n      <td className=\"flights-table__local-time\">{preparedLocalTime}</td>\n      <td className=\"flights-table__destination-col\">{destination}</td>\n      <td className=\"flights-table__status-col\">{`${statusFlight(\n        status\n      )} ${actualTime}`}</td>\n      <td className=\"flights-table__airline-col\">{airline.en.name}</td>\n      <td className=\"flights-table__flight-col\">\n        {codeShareData[0].codeShare}\n      </td>\n      <td className=\"flights-table__details-field\">\n        <FlightDetailsLink flightId={flight.ID} />\n      </td>\n    </tr>\n  );\n};\n\nexport default Flight;\n","import React, { FC, useEffect } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { RootState, DirectionTypes } from '../../utils/interfaces';\nimport { getVisibleFlights, getFetching } from '../../reducers';\nimport { loadFlights } from '../../actions';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Departure, Arrival } from '../../utils/flightsTypes';\nimport Flight from './Flight';\nimport './VisibleFlights.scss';\n\nconst VisibleFlights: FC<ConnectedProps<typeof connector>> = ({\n  flights,\n  fetching,\n  loadFlights,\n}) => {\n  const location = useLocation();\n  const params: { direction: string } = useParams();\n  const pathname =\n    params.direction === 'arrivals'\n      ? DirectionTypes.ARRIVAL\n      : params.direction === 'departures'\n      ? DirectionTypes.DEPARTURE\n      : null;\n  const searchParams = new URLSearchParams(location.search);\n\n  const currentDate = new Date().toLocaleDateString().split('.').join('-');\n  const date = searchParams.get('date') || currentDate;\n  // const preparedDate = date.split('-').reverse().join('-');\n\n  useEffect(() => {\n    console.log('reload data from:', pathname, ', date:', date);\n\n    loadFlights(date, pathname);\n    // eslint-disable-next-line\n  }, [pathname, date]);\n\n  const listOfHeads = [\n    'Terminal',\n    'Local time',\n    'Destination',\n    'Status',\n    'Airline',\n    'Flight',\n  ];\n  const thList = listOfHeads.map((head, i) => <th key={i}>{head}</th>);\n  if (flights.length !== 0) {\n    return (\n      <table className=\"flights-table\">\n        <thead>\n          <tr>{thList}</tr>\n        </thead>\n        <tbody>\n          {(flights as Array<Arrival | Departure>).map((flight) => (\n            <Flight key={flight.ID} flight={flight} fetching={fetching} />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n  return (\n    <div className=\"nothing-found\">\n      {fetching ? <span>Loading</span> : <span>No flights</span>}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  flights: getVisibleFlights(state),\n  fetching: getFetching(state),\n});\n\nconst connector = connect(mapStateToProps, { loadFlights });\nexport default connector(VisibleFlights);\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  setDateParams: (date: Date) => void;\n  calendarDate: (date: Date) => string;\n  date: Date;\n  children: React.ReactNode;\n  selectedDate: Date;\n};\n\nconst DateLink: FC<Props> = ({\n  setDateParams,\n  calendarDate,\n  date,\n  children,\n  selectedDate,\n}) => {\n  const isActive =\n    selectedDate.toLocaleDateString() === date.toLocaleDateString();\n\n  return (\n    <div\n      className={classNames('flights-dates__day', {\n        'flights-dates__day_active': isActive,\n      })}\n      onClick={() => setDateParams(date)}\n    >\n      <span>{calendarDate(date)}</span>\n      {children}\n    </div>\n  );\n};\n\nexport default DateLink;\n","import React, { FC, useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport DateLink from './DateLink';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './FlightDate.scss';\n\nfunction reverseDate(date: string | null) {\n  if (date) {\n    return new Date(date.split('-').reverse().join('-'));\n  }\n  return new Date();\n}\nfunction stringifyDate(date: Date) {\n  return date.toLocaleDateString().split('.').join('-');\n}\nfunction calendarDate(date: Date) {\n  return date\n    .toLocaleDateString([], { month: 'numeric', day: 'numeric' })\n    .replace('.', '/');\n}\n\nconst FlightDate: FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n  const [selectedDate, handleDateChange] = useState(\n    reverseDate(searchParams.get('date'))\n  );\n  const setDateParams = (date: Date) => {\n    handleDateChange(reverseDate(stringifyDate(date)));\n  };\n  const getDateToParams = (day: number) => {\n    const date = new Date();\n    date.setDate(date.getDate() + day);\n\n    return date;\n  };\n\n  useEffect(() => {\n    const date = stringifyDate(selectedDate);\n    searchParams.set('date', date);\n    history.push({\n      search: searchParams.toString(),\n    });\n    // eslint-disable-next-line\n  }, [selectedDate]);\n\n  console.log(selectedDate);\n\n  return (\n    <div className=\"flights-dates__container\">\n      <DatePicker\n        selected={selectedDate}\n        onChange={(date: Date) => handleDateChange(date)}\n        customInput={\n          <div className=\"flights-calendar__container\">\n            <div className=\"flights-calendar__datepicker\">\n              <input\n                type=\"text\"\n                readOnly\n                className=\"flights-calendar__input\"\n                value={calendarDate(selectedDate)}\n              />\n            </div>\n          </div>\n        }\n      />\n      <div className=\"flights-dates__list\">\n        <DateLink\n          selectedDate={selectedDate}\n          calendarDate={calendarDate}\n          setDateParams={setDateParams}\n          date={getDateToParams(-1)}\n        >\n          Yesterday\n        </DateLink>\n        <DateLink\n          selectedDate={selectedDate}\n          calendarDate={calendarDate}\n          setDateParams={setDateParams}\n          date={getDateToParams(0)}\n        >\n          Today\n        </DateLink>\n        <DateLink\n          selectedDate={selectedDate}\n          calendarDate={calendarDate}\n          setDateParams={setDateParams}\n          date={getDateToParams(1)}\n        >\n          Tomorrow\n        </DateLink>\n      </div>\n    </div>\n  );\n};\n\nexport default FlightDate;\n","import React, { FC, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { setFilteredQuery } from '../../actions';\nimport './SearchField.scss';\n\nconst SearchField: FC<ConnectedProps<typeof connector>> = ({\n  setFilteredQuery,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n\n  useEffect(() => {\n    setFilteredQuery(query);\n    // eslint-disable-next-line\n  }, [query]);\n\n  const [visibleQuery, setVisibleQuery] = useState<string>(query);\n\n  const updateQuery = (value: string) => {\n    if (value) {\n      searchParams.set('query', value);\n    } else {\n      searchParams.delete('query');\n    }\n\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  const handleQueryUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    setVisibleQuery(value);\n  };\n\n  const handleButtonQueryUpdate = () => {\n    updateQuery(visibleQuery);\n  };\n\n  return (\n    <div className=\"flights__search-field search-field\">\n      <h2 className=\"search-field__title\">SEARCH FLIGHT</h2>\n      <div className=\"search-field__search-line\">\n        <input\n          className=\"search-field__input\"\n          type=\"text\"\n          placeholder=\"Airline, destination or flight #\"\n          value={visibleQuery}\n          onChange={handleQueryUpdate}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter') {\n              handleButtonQueryUpdate();\n            }\n          }}\n        />\n        <button\n          className=\"search-field__button\"\n          onClick={handleButtonQueryUpdate}\n        >\n          Search\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst connector = connect(null, { setFilteredQuery });\nexport default connector(SearchField);\n","import React, { FC } from 'react';\nimport './App.scss';\nimport Direction from './Direction/Direction';\nimport VisibleFlights from './VisibleFlights/VisibleFlights';\nimport FlightDate from './FlightDate/FlightDate';\nimport SearchField from './SearchField/SearchField';\n\nconst App: FC = () => {\n  return (\n    <div className=\"flights__container\">\n      <SearchField />\n      <Direction />\n      <FlightDate />\n      <VisibleFlights />\n    </div>\n  );\n};\n\nexport default App;\n","import React, { FC, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../utils/interfaces';\nimport { loadFlight } from '../../actions';\nimport { getFlight } from '../../reducers';\nimport { useLocation, useParams, NavLink } from 'react-router-dom';\nimport './FlightDetails.scss';\nimport { isArrival } from '../VisibleFlights/Flight';\nimport { statusFlight } from '../../utils/statusFlight';\n\ntype Params = { direction: string; flightId: string };\n\nconst FlightDetails: FC<ConnectedProps<typeof connector>> = ({\n  flight,\n  loadFlight,\n}) => {\n  const location = useLocation();\n  const params: Params = useParams();\n  const pathname = params.direction;\n  const flightId = params.flightId;\n  const searchParams = new URLSearchParams(location.search);\n\n  const date = searchParams.get('dt') || '';\n\n  useEffect(() => {\n    console.log('Load data from:', flightId, ', date:', date);\n\n    loadFlight(date, flightId);\n    // eslint-disable-next-line\n  }, [date, flightId]);\n\n  if (flight) {\n    const { term, status, codeShareData, actual } = flight;\n    let localTime = '',\n      actualTime = '',\n      destination = '',\n      stand: string | undefined = undefined,\n      gate: string | undefined = undefined;\n\n    const toTimeString = (date: string) => {\n      return new Date(date).toLocaleTimeString([], {\n        hour: 'numeric',\n        minute: '2-digit',\n      });\n    };\n\n    if (isArrival(flight)) {\n      localTime = flight.timeToStand;\n      destination = flight['airportFromID.city_en'];\n\n      if (status === 'LN') {\n        actualTime = toTimeString(actual);\n      }\n    } else {\n      localTime = flight.timeDepExpectCalc;\n      destination = flight['airportToID.city_en'];\n      stand = flight.checkinNo;\n      gate = flight.gateNo;\n\n      if (flight.timeTakeofFact && status === 'DP') {\n        actualTime = `at ${toTimeString(flight.timeTakeofFact)}`;\n      }\n    }\n    const preparedDate = date.split('-').slice(0, 2).join('.');\n    const preparedFullDate = date.split('-').join('.');\n    const preparedLocalTime = toTimeString(localTime);\n    const flightNumber = codeShareData[0].codeShare;\n    const flightStatus = `${statusFlight(status)}${\n      actualTime ? ` ${actualTime}, ${preparedFullDate}` : ''\n    }`;\n\n    const flightInfoHeaders = {\n      Date: preparedDate,\n      Time: preparedLocalTime,\n      Terminal: term,\n      Flight: flightNumber,\n      Gate: gate,\n      Stand: stand,\n    };\n    const flightInfoList: {\n      header: string;\n      value: string | undefined;\n    }[] = Object.entries(flightInfoHeaders)\n      .map(([key, value]) => ({\n        header: key,\n        value: value,\n      }))\n      .filter(({ value }) => value);\n\n    return (\n      <div className=\"flight__container\">\n        <div className=\"flight__back-button\">\n          <NavLink to={`/${pathname}?date=${date}`}>Back</NavLink>\n        </div>\n        <div className=\"flight__info-details\">\n          <div className=\"flight__flight-number\">\n            <b>{flightNumber}</b> flies {isArrival(flight) ? 'from' : 'in'}\n          </div>\n          <div className=\"flight__city-name\">{destination}</div>\n          <div className=\"flight__title\">Flight information:</div>\n          <div className=\"flight__details\">\n            <ul>\n              {flightInfoList.map(({ header, value }) => (\n                <li key={header}>\n                  <p className=\"flight__details-label\">{header}</p>\n                  <p className=\"flight__details-value\">\n                    <b>{value}</b>\n                  </p>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"flight__status\">{flightStatus}</div>\n        </div>\n      </div>\n    );\n  }\n  return <p>Loading...</p>;\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  flight: getFlight(state),\n});\nconst connector = connect(mapStateToProps, { loadFlight });\nexport default connector(FlightDetails);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport { rootReducer } from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\nimport FlightDetails from './components/FlightDetails/FlightDetails';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route exact path=\"/:direction\" component={App} />\r\n          <Route exact path=\"/:direction/:flightId\" component={FlightDetails} />\r\n        </Switch>\r\n      </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}