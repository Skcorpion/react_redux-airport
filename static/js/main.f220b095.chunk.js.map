{"version":3,"sources":["utils/interfaces.ts","utils/actionTypes.ts","reducers/sortReducer.ts","reducers/fetchFlights.ts","reducers/fetchFlight.ts","reducers/index.ts","components/Direction/DirectionLink.tsx","api/index.ts","actions/fetchDataActions.ts","actions/sortActions.ts","components/SearchField/SearchField.tsx","components/HomePage/HomePage.tsx","components/Direction/Direction.tsx","helpers/dateFunctions.ts","helpers/statusFlight.ts","helpers/flightDetails.ts","helpers/index.ts","components/VisibleFlights/FlightDetailsLink.tsx","components/VisibleFlights/Flight.tsx","components/VisibleFlights/VisibleFlights.tsx","components/FlightDate/DateLink.tsx","components/FlightDate/FlightDate.tsx","components/FlightsTable/FlightsTable.tsx","components/FlightDetails/FlightDetails.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","components/App.tsx","index.tsx"],"names":["DirectionTypes","ActionTypes","initialState","filteredQuery","flights","arrival","departure","direction","fetching","flight","rootReducer","combineReducers","fetchFlights","state","action","type","REQUESTING_FLIGHTS","RECEIVED_FLIGHTS","date","preparedDate","split","reverse","join","currentDay","Date","getDate","body","filter","flightDay","timeToStand","sort","a","b","parse","timeDepExpectCalc","sortReducer","SET_FILTERED_QUERY","fetchFlight","REQUESTING_FLIGHT","RECEIVED_FLIGHT","getFetching","fromFetchFlights","getFlight","fromFetchFlight","getVisibleFlights","createSelector","fromSort","pattern","RegExp","DEPARTURE","test","codeShareData","codeShare","airline","en","name","ARRIVAL","DirectionLink","children","location","useLocation","searchParams","URLSearchParams","search","get","query","className","activeClassName","isActive","pathname","includes","to","toString","API_URL","getData","url","fetch","response","json","data","getFlightsFromServer","getFlightFromServer","id","receivedFlights","receivedFlight","setFilteredQuery","connector","connect","dispatch","history","useHistory","params","useParams","useEffect","useState","visibleQuery","setVisibleQuery","handleButtonQueryUpdate","value","set","delete","push","placeholder","onChange","event","target","onKeyDown","key","onClick","Home","Direction","toDateFormat","stringifyDate","toLocaleDateString","getStringTime","toLocaleTimeString","hour","minute","statusFlight","status","getFlightDetails","actual","localTime","actualTime","destination","stand","undefined","gate","isArrival","checkinNo","gateNo","timeTakeofFact","timeLandCalc","FlightDetailsLink","flightId","currentDate","Flight","React","memo","term","flightDetails","preparedLocalTime","classNames","blue","ID","loadFlights","thList","map","head","i","length","DateLink","setSelectedDate","calendarDate","month","day","getDateToDateLink","setDate","FlightDate","paramsDate","selectedDate","handleDateChange","selected","customInput","readOnly","FlightsTable","loadFlight","slice","preparedFullDate","flightNumber","flightStatus","flightInfoHeaders","Time","Terminal","Gate","Stand","flightInfoList","Object","entries","header","Header","Footer","alt","src","App","exact","path","component","HomePage","FlightDetails","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f220b095.chunk.js","sourcesContent":["import { Body, Departure, Arrival } from './flightsTypes';\n\nexport enum DirectionTypes {\n  ARRIVAL = 'arrival',\n  DEPARTURE = 'departure',\n}\n\nexport type IDirection =\n  | typeof DirectionTypes.ARRIVAL\n  | typeof DirectionTypes.DEPARTURE\n  | null;\n\nexport interface ISort {\n  filteredQuery: string;\n}\n\nexport interface IFetchFlights {\n  flights: Body;\n  direction: IDirection;\n  fetching: boolean;\n}\n\nexport interface IFetchFlight {\n  flight: Arrival | Departure | null;\n  fetching: boolean;\n}\n\nexport interface RootState {\n  sortReducer: ISort;\n  fetchFlights: IFetchFlights;\n  fetchFlight: IFetchFlight;\n}\n","import { IFlights, IFlight } from './flightsTypes';\nimport { IDirection } from './interfaces';\n\n/*\n * action types\n */\nexport enum ActionTypes {\n  REQUESTING_FLIGHTS = 'REQUESTING_FLIGHTS',\n  REQUESTING_FLIGHT = 'REQUESTING_FLIGHT',\n  RECEIVED_FLIGHTS = 'RECEIVED_FLIGHTS',\n  RECEIVED_FLIGHT = 'RECEIVED_FLIGHT',\n  SET_FILTERED_QUERY = 'SET_FILTERED_QUERY',\n}\n/*\n * actions\n */\ninterface RequestingFlightsAction {\n  type: typeof ActionTypes.REQUESTING_FLIGHTS;\n}\ninterface RequestingFlightAction {\n  type: typeof ActionTypes.REQUESTING_FLIGHT;\n}\ninterface ReceivedFlightsAction {\n  type: typeof ActionTypes.RECEIVED_FLIGHTS;\n  flights: IFlights;\n  direction: IDirection;\n  date: string;\n}\ninterface ReceivedFlightAction {\n  type: typeof ActionTypes.RECEIVED_FLIGHT;\n  flight: IFlight;\n}\ninterface SetFilteredQueryAction {\n  type: typeof ActionTypes.SET_FILTERED_QUERY;\n  filteredQuery: string;\n}\n\nexport type Actions =\n  | RequestingFlightsAction\n  | RequestingFlightAction\n  | ReceivedFlightsAction\n  | ReceivedFlightAction\n  | SetFilteredQueryAction;\n","import { ISort } from '../utils/interfaces';\nimport { Actions, ActionTypes } from '../utils/actionTypes';\n\nconst initialState = {\n  filteredQuery: ''\n};\n\nexport default (state: ISort = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.SET_FILTERED_QUERY:\n      return { ...state, filteredQuery: action.filteredQuery };\n\n    default:\n      return state;\n  }\n};\n\n//selectors\nexport const getFilteredQuery = (state: ISort) => state.filteredQuery;","import { Actions, ActionTypes } from '../utils/actionTypes';\nimport { IFetchFlights } from '../utils/interfaces';\n\nconst initialState: IFetchFlights = {\n  flights: { arrival: [], departure: [] },\n  direction: null,\n  fetching: false,\n};\n\nexport default (state: IFetchFlights = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.REQUESTING_FLIGHTS:\n      return { ...state, fetching: true };\n\n    case ActionTypes.RECEIVED_FLIGHTS:\n      const { flights, direction, date } = action;\n      const preparedDate = date.split('-').reverse().join('-');\n      const currentDay = new Date(preparedDate).getDate();\n      return {\n        ...state,\n        flights: {\n          arrival: [...flights.body.arrival]\n            .filter((flight) => {\n              const flightDay = new Date(flight.timeToStand).getDate();\n\n              return currentDay === flightDay;\n            })\n            .sort((a, b) => {\n              return Date.parse(a.timeToStand) - Date.parse(b.timeToStand);\n            }),\n          departure: [...flights.body.departure]\n            .filter((flight) => {\n              const flightDay = new Date(flight.timeDepExpectCalc).getDate();\n\n              return currentDay === flightDay;\n            })\n            .sort((a, b) => {\n              return (\n                Date.parse(a.timeDepExpectCalc) -\n                Date.parse(b.timeDepExpectCalc)\n              );\n            }),\n        },\n        direction,\n        fetching: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\n//selector\nexport const getFlights = (state: IFetchFlights) => state.flights;\nexport const getFetching = (state: IFetchFlights) => state.fetching;\nexport const getDirection = (state: IFetchFlights) => state.direction;\n","import { Actions, ActionTypes } from '../utils/actionTypes';\nimport { IFetchFlight } from '../utils/interfaces';\n\nconst initialState: IFetchFlight = {\n  flight: null,\n  fetching: false,\n};\n\nexport default (state: IFetchFlight = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.REQUESTING_FLIGHT:\n      return { ...state, fetching: true };\n\n    case ActionTypes.RECEIVED_FLIGHT:\n      const { flight } = action;\n      return {\n        ...state,\n        flight: { ...flight.body },\n        fetching: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\n//selector\nexport const getFlight = (state: IFetchFlight) => state.flight;\nexport const getFetching = (state: IFetchFlight) => state.fetching;\n","import { RootState, DirectionTypes } from '../utils/interfaces';\nimport { createSelector } from 'reselect';\nimport sortReducer, * as fromSort from './sortReducer';\nimport fetchFlights, * as fromFetchFlights from './fetchFlights';\nimport fetchFlight, * as fromFetchFlight from './fetchFlight';\nimport { combineReducers } from 'redux';\n\nexport const rootReducer = combineReducers({\n  fetchFlights,\n  sortReducer,\n  fetchFlight,\n});\n\n//selector\nexport const getFlights = (state: RootState) =>\n  fromFetchFlights.getFlights(state.fetchFlights);\nexport const getFetching = (state: RootState) =>\n  fromFetchFlights.getFetching(state.fetchFlights);\nexport const getDirection = (state: RootState) =>\n  fromFetchFlights.getDirection(state.fetchFlights);\n\nexport const getFlight = (state: RootState) =>\n  fromFetchFlight.getFlight(state.fetchFlight);\nexport const getFlightFetching = (state: RootState) =>\n  fromFetchFlight.getFetching(state.fetchFlight);\n\nexport const getFilteredQuery = (state: RootState) =>\n  fromSort.getFilteredQuery(state.sortReducer);\n\nexport const getVisibleFlights = createSelector(\n  [getFlights, getDirection, getFilteredQuery],\n  (flights, direction, filteredQuery) => {\n    const pattern = new RegExp(filteredQuery, 'i');\n\n    if (direction === DirectionTypes.DEPARTURE) {\n      return [\n        ...flights.departure.filter(\n          (flight) =>\n            pattern.test(flight.codeShareData[0].codeShare) ||\n            pattern.test(flight['airportToID.city_en']) ||\n            pattern.test(flight.airline.en.name)\n        ),\n      ];\n    } else if (direction === DirectionTypes.ARRIVAL) {\n      return [\n        ...flights.arrival.filter(\n          (flight) =>\n            pattern.test(flight.codeShareData[0].codeShare) ||\n            pattern.test(flight['airportFromID.city_en']) ||\n            pattern.test(flight.airline.en.name)\n        ),\n      ];\n    }\n\n    return [];\n  }\n);\n","import React, { FC } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\ntype Props = {\n  direction: string;\n  children: string;\n};\n\nconst DirectionLink: FC<Props> = ({ direction, children }) => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const date = searchParams.get('date') || '';\n  const query = searchParams.get('query') || '';\n\n  return (\n    <NavLink\n      className=\"direction-tabs__tab\"\n      activeClassName=\"direction-tabs__tab_active\"\n      isActive={() => {\n        if (location.pathname.includes(direction)) {\n          return true;\n        }\n        return false;\n      }}\n      to={`/${direction}${date || query ? `?${searchParams.toString()}` : ''}`}\n    >\n      {children}\n    </NavLink>\n  );\n};\n\nexport default DirectionLink;\n","import { IFlights, IFlight } from '../utils/flightsTypes';\n\nconst API_URL = 'https://api.iev.aero/api/flights/';\nexport const delay = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n\nexport const getFlightsFromServer = async (date: string) => {\n  // await delay(1000);\n  return getData<IFlights>(`${API_URL}${date}`);\n};\n\nexport const getFlightFromServer = async (date: string, id: string) => {\n  return getData<IFlight>(`${API_URL}${date}/${id}`);\n};\n","import { Actions, ActionTypes } from '../utils/actionTypes';\nimport { IFlights, IFlight } from '../utils/flightsTypes';\nimport { Dispatch } from 'react';\nimport { getFlightsFromServer, getFlightFromServer } from '../api';\nimport { IDirection } from '../utils/interfaces';\n\n/*\n * action creators\n */\nconst requestingFlights = (): Actions => ({\n  type: ActionTypes.REQUESTING_FLIGHTS,\n});\nconst receivedFlights = (\n  flights: IFlights,\n  direction: IDirection,\n  date: string\n): Actions => ({\n  type: ActionTypes.RECEIVED_FLIGHTS,\n  flights,\n  direction,\n  date,\n});\n\nexport const loadFlights = (date: string, direction: IDirection) => {\n  return async function (dispatch: Dispatch<Actions>) {\n    dispatch(requestingFlights());\n\n    const flights = await getFlightsFromServer(date);\n    dispatch(receivedFlights(flights, direction, date));\n  };\n};\n\nconst requestingFlight = (): Actions => ({\n  type: ActionTypes.REQUESTING_FLIGHT,\n});\nconst receivedFlight = (flight: IFlight): Actions => ({\n  type: ActionTypes.RECEIVED_FLIGHT,\n  flight,\n});\n\nexport const loadFlight = (date: string, id: string) => {\n  return async function (dispatch: Dispatch<Actions>) {\n    dispatch(requestingFlight());\n\n    const flight = await getFlightFromServer(date, id);\n    dispatch(receivedFlight(flight));\n  };\n};\n","import { ActionTypes, Actions } from '../utils/actionTypes';\nimport { Dispatch } from 'react';\n// import { delay } from '../api';\n\n/*\n * action creators\n */\nconst setFilteredQuery = (filteredQuery: string): Actions => ({\n  type: ActionTypes.SET_FILTERED_QUERY,\n  filteredQuery,\n});\n\nexport const setFilteredQueryWithDelay = (filteredQuery: string) => {\n  return async function (dispatch: Dispatch<Actions>) {\n    // await delay(1000);\n    dispatch(setFilteredQuery(filteredQuery));\n  };\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { setFilteredQuery } from '../../actions';\nimport './SearchField.scss';\n\nconst SearchField: FC<ConnectedProps<typeof connector>> = ({\n  setFilteredQuery,\n  children,\n}) => {\n  const history = useHistory();\n  const params: { direction: string | undefined } = useParams();\n  const direction = params.direction || 'departures';\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n\n  useEffect(() => {\n    setFilteredQuery(query);\n    // eslint-disable-next-line\n  }, [query]);\n\n  const [visibleQuery, setVisibleQuery] = useState<string>(query);\n\n  const updateQuery = (value: string) => {\n    if (params.direction || value) {\n      if (value) {\n        searchParams.set('query', value);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history.push({\n        pathname: direction,\n        search: searchParams.toString(),\n      });\n    }\n  };\n\n  const handleQueryUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    setVisibleQuery(value);\n  };\n\n  const handleButtonQueryUpdate = () => {\n    updateQuery(visibleQuery);\n  };\n\n  return (\n    <div className=\"flights__search-field search-field\">\n      <h2 className=\"search-field__title\">SEARCH FLIGHT</h2>\n      <div className=\"search-field__search-line\">\n        <input\n          className=\"search-field__input\"\n          type=\"text\"\n          placeholder=\"Airline, destination or flight №\"\n          value={visibleQuery}\n          onChange={handleQueryUpdate}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter') {\n              handleButtonQueryUpdate();\n            }\n          }}\n        />\n        <button\n          className=\"search-field__button\"\n          onClick={handleButtonQueryUpdate}\n        >\n          Search\n        </button>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nconst connector = connect(null, { setFilteredQuery });\nexport default connector(SearchField);\n","import React from 'react';\nimport DirectionLink from '../Direction/DirectionLink';\nimport SearchField from '../SearchField/SearchField';\nimport './HomePage.scss';\n\nconst Home = () => {\n  return (\n    <div className=\"home\">\n      <div className=\"container home__container\">\n        <SearchField>\n          <div className=\"home__direction-tabs direction-tabs\">\n            <DirectionLink direction=\"departures\">all departures</DirectionLink>\n            <DirectionLink direction=\"arrivals\">all arrivals</DirectionLink>\n          </div>\n        </SearchField>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { FC } from 'react';\nimport DirectionLink from './DirectionLink';\nimport './Direction.scss';\n\nconst Direction: FC = () => {\n  return (\n    <div className=\"flights__direction-tabs direction-tabs\">\n      <DirectionLink direction=\"departures\">departures</DirectionLink>\n      <DirectionLink direction=\"arrivals\">arrivals</DirectionLink>\n    </div>\n  );\n};\n\nexport default Direction;\n","export function toDateFormat(date: string | null) {\n  if (date) {\n    return new Date(date.split('-').reverse().join('-'));\n  }\n  return new Date();\n}\n\nexport function stringifyDate(date: Date) {\n  return date.toLocaleDateString('en-GB').split('/').join('-');\n}\n\nexport function getStringTime(date: string) {\n  return new Date(date).toLocaleTimeString('en-GB', {\n    hour: 'numeric',\n    minute: '2-digit',\n  });\n}\n","export const statusFlight = (status: IStatus): string => {\n  switch (status) {\n    case 'ON':\n      return 'On time';\n    case 'CX':\n      return 'Canceled';\n    case 'LN':\n      return 'Landed';\n    case 'CK':\n      return 'Check-in';\n    case 'FR':\n      return 'In flight';\n    case 'BD':\n      return 'Boarding';\n    case 'DP':\n      return 'Departed';\n    case 'DV':\n      return 'Route change';\n    case 'GC':\n      return 'Gate closed';\n    default:\n      return status;\n  }\n};\n","import { Departure, Arrival } from '../utils/flightsTypes';\nimport { isArrival, getStringTime } from '.';\n\nexport function getFlightDetails(flight: Arrival | Departure) {\n  const { status, actual } = flight;\n  let localTime = '',\n    actualTime = '',\n    destination = '',\n    stand: string | undefined = undefined,\n    gate: string | undefined = undefined;\n\n  if (isArrival(flight)) {\n    localTime = flight.timeToStand;\n    destination = flight['airportFromID.city_en'];\n\n    if (status === 'LN') {\n      actualTime = getStringTime(actual);\n    }\n  } else {\n    localTime = flight.timeDepExpectCalc;\n    destination = flight['airportToID.city_en'];\n    stand = flight.checkinNo;\n    gate = flight.gateNo;\n\n    if (flight.timeTakeofFact && status === 'DP') {\n      actualTime = getStringTime(flight.timeTakeofFact);\n    }\n  }\n\n  return {\n    localTime,\n    actualTime,\n    destination,\n    stand,\n    gate,\n  };\n}\n","import { toDateFormat, stringifyDate, getStringTime } from './dateFunctions';\nimport { statusFlight } from './statusFlight';\nimport { getFlightDetails } from './flightDetails';\nimport { Arrival, Departure } from '../utils/flightsTypes';\n\nexport {\n  // -------- Date functions --------\n  toDateFormat,\n  stringifyDate,\n  getStringTime,\n  // -------- Flight status --------\n  statusFlight,\n  // -------- Flight details --------\n  getFlightDetails,\n};\n\nexport function isArrival(flight: Arrival | Departure): flight is Arrival {\n  return (flight as Arrival).timeLandCalc !== undefined;\n}\n","import React, { FC } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { stringifyDate } from '../../helpers';\n\ntype Props = {\n  flightId: number;\n};\n\nconst FlightDetailsLink: FC<Props> = ({ flightId }) => {\n  const location = useLocation();\n  const pathname = location.pathname;\n  const searchParams = new URLSearchParams(location.search);\n  const currentDate = stringifyDate(new Date());\n  const date = searchParams.get('date') || currentDate;\n\n  return (\n    <NavLink to={`${pathname}/${flightId}?dt=${date}`}>Flight Details</NavLink>\n  );\n};\n\nexport default FlightDetailsLink;\n","import React, { FC } from 'react';\nimport { Arrival, Departure } from '../../utils/flightsTypes';\nimport classNames from 'classnames';\nimport FlightDetailsLink from './FlightDetailsLink';\nimport { getStringTime, statusFlight, getFlightDetails } from '../../helpers';\n\ntype Props = {\n  flight: Arrival | Departure;\n};\n\nconst Flight: FC<Props> = React.memo(({ flight }) => {\n  const { term, status, codeShareData, airline } = flight;\n  const flightDetails = { ...getFlightDetails(flight) };\n  const { localTime, actualTime, destination } = flightDetails;\n  const preparedLocalTime = getStringTime(localTime);\n\n  return (\n    <tr>\n      <td\n        className={classNames('flights-table__terminal-col', {\n          blue: term === 'D',\n        })}\n      >\n        <span>{term}</span>\n      </td>\n      <td className=\"flights-table__local-time\">{preparedLocalTime}</td>\n      <td className=\"flights-table__destination-col\">{destination}</td>\n      <td className=\"flights-table__status-col\">{`${statusFlight(\n        status\n      )} ${actualTime}`}</td>\n      <td className=\"flights-table__airline-col\">{airline.en.name}</td>\n      <td className=\"flights-table__flight-col\">\n        {codeShareData[0].codeShare}\n      </td>\n      <td className=\"flights-table__details-field\">\n        <FlightDetailsLink flightId={flight.ID} />\n      </td>\n    </tr>\n  );\n});\n\nexport default Flight;\n","import React, { FC, useEffect } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { RootState, DirectionTypes } from '../../utils/interfaces';\nimport { getVisibleFlights, getFetching } from '../../reducers';\nimport { loadFlights } from '../../actions';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Departure, Arrival } from '../../utils/flightsTypes';\nimport Flight from './Flight';\nimport './VisibleFlights.scss';\nimport { stringifyDate } from '../../helpers';\n// import { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nconst VisibleFlights: FC<ConnectedProps<typeof connector>> = ({\n  flights,\n  fetching,\n  loadFlights,\n}) => {\n  const location = useLocation();\n  const params: { direction: string } = useParams();\n  const pathname =\n    params.direction === 'arrivals'\n      ? DirectionTypes.ARRIVAL\n      : params.direction === 'departures'\n      ? DirectionTypes.DEPARTURE\n      : null;\n  const searchParams = new URLSearchParams(location.search);\n\n  const currentDate = stringifyDate(new Date());\n  const date = searchParams.get('date') || currentDate;\n\n  useEffect(() => {\n    loadFlights(date, pathname);\n    // eslint-disable-next-line\n  }, [pathname, date]);\n\n  const listOfHeads = [\n    'Terminal',\n    'Local time',\n    'Destination',\n    'Status',\n    'Airline',\n    'Flight',\n  ];\n  const thList = listOfHeads.map((head, i) => <th key={i}>{head}</th>);\n  if (flights.length !== 0) {\n    return (\n      <table className=\"flights-table\">\n        <thead>\n          <tr>{thList}</tr>\n        </thead>\n        <tbody>\n          {(flights as Array<Arrival | Departure>).map((flight) => (\n            <Flight key={flight.ID} flight={flight} />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n  return (\n    <div className=\"nothing-found\">\n      {fetching ? <span>Loading...</span> : <span>No flights</span>}\n    </div>\n  );\n};\n\n// Need todo\n{\n  /* <TransitionGroup>\n  <CSSTransition\n    key={flight.ID}\n    classNames=\"list\"\n    timeout={{ enter: 500, exit: 300 }}\n  ></CSSTransition>\n</TransitionGroup> */\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  flights: getVisibleFlights(state),\n  fetching: getFetching(state),\n});\n\nconst connector = connect(mapStateToProps, { loadFlights });\nexport default connector(VisibleFlights);\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  setSelectedDate: (date: string) => void;\n  calendarDate: (date: string) => string;\n  date: string;\n  children: React.ReactNode;\n  isActive: boolean;\n};\n\nconst DateLink: FC<Props> = React.memo(\n  ({ setSelectedDate, calendarDate, date, children, isActive }) => {\n    return (\n      <div\n        className={classNames('flights-dates__day', {\n          'flights-dates__day_active': isActive,\n        })}\n        onClick={() => setSelectedDate(date)}\n      >\n        <span>{calendarDate(date)}</span>\n        {children}\n      </div>\n    );\n  }\n);\n\nexport default DateLink;\n","import React, { FC, useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport DateLink from './DateLink';\nimport DatePicker from 'react-datepicker';\nimport { toDateFormat, stringifyDate } from '../../helpers';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './FlightDate.scss';\n\nconst calendarDate = (date: string) =>\n  toDateFormat(date).toLocaleDateString('en-GB', {\n    month: 'numeric',\n    day: 'numeric',\n  });\n\nfunction getDateToDateLink(day: number) {\n  const date = new Date();\n  date.setDate(date.getDate() + day);\n\n  return stringifyDate(date);\n}\n\nconst FlightDate: FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n  const currentDate = stringifyDate(new Date());\n  const paramsDate = searchParams.get('date') || currentDate;\n  const [selectedDate, handleDateChange] = useState(paramsDate);\n\n  useEffect(() => {\n    handleDateChange(paramsDate);\n    // eslint-disable-next-line\n  }, [paramsDate]);\n\n  useEffect(() => {\n    if (selectedDate === currentDate) {\n      searchParams.delete('date');\n    } else {\n      searchParams.set('date', selectedDate);\n    }\n\n    history.push({\n      search: searchParams.toString(),\n    });\n    // eslint-disable-next-line\n  }, [selectedDate]);\n\n  return (\n    <div className=\"flights-dates__container\">\n      <DatePicker\n        selected={toDateFormat(selectedDate)}\n        onChange={(date: Date) => handleDateChange(stringifyDate(date))}\n        customInput={\n          <div className=\"flights-calendar__container\">\n            <div className=\"flights-calendar__datepicker\">\n              <input\n                type=\"text\"\n                readOnly\n                className=\"flights-calendar__input\"\n                value={calendarDate(selectedDate)}\n              />\n            </div>\n          </div>\n        }\n      />\n      <div className=\"flights-dates__list\">\n        <DateLink\n          setSelectedDate={handleDateChange}\n          date={getDateToDateLink(-1)}\n          isActive={getDateToDateLink(-1) === selectedDate}\n          calendarDate={calendarDate}\n        >\n          Yesterday\n        </DateLink>\n        <DateLink\n          setSelectedDate={handleDateChange}\n          date={getDateToDateLink(0)}\n          isActive={getDateToDateLink(0) === selectedDate}\n          calendarDate={calendarDate}\n        >\n          Today\n        </DateLink>\n        <DateLink\n          setSelectedDate={handleDateChange}\n          date={getDateToDateLink(1)}\n          isActive={getDateToDateLink(1) === selectedDate}\n          calendarDate={calendarDate}\n        >\n          Tomorrow\n        </DateLink>\n      </div>\n    </div>\n  );\n};\n\nexport default FlightDate;\n","import React, { FC } from 'react';\nimport Direction from '../Direction/Direction';\nimport VisibleFlights from '../VisibleFlights/VisibleFlights';\nimport FlightDate from '../FlightDate/FlightDate';\nimport SearchField from '../SearchField/SearchField';\n\nconst FlightsTable: FC = () => {\n  return (\n    <div className=\"container flights__container\">\n      <SearchField />\n      <Direction />\n      <FlightDate />\n      <VisibleFlights />\n    </div>\n  );\n};\n\nexport default FlightsTable;\n","import React, { FC, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../utils/interfaces';\nimport { loadFlight } from '../../actions';\nimport { getFlight } from '../../reducers';\nimport { useLocation, useParams, NavLink } from 'react-router-dom';\nimport './FlightDetails.scss';\nimport { isArrival, getFlightDetails } from '../../helpers';\nimport { statusFlight, getStringTime } from '../../helpers';\n\ntype Params = { direction: string; flightId: string };\n\nconst FlightDetails: FC<ConnectedProps<typeof connector>> = ({\n  flight,\n  loadFlight,\n}) => {\n  const location = useLocation();\n  const params: Params = useParams();\n  const pathname = params.direction;\n  const flightId = params.flightId;\n  const searchParams = new URLSearchParams(location.search);\n  const date = searchParams.get('dt') || '';\n\n  useEffect(() => {\n    loadFlight(date, flightId);\n    // eslint-disable-next-line\n  }, [date, flightId]);\n\n  if (flight) {\n    const { term, status, codeShareData } = flight;\n    const flightDetails = { ...getFlightDetails(flight) };\n    const { localTime, actualTime, destination, stand, gate } = flightDetails;\n\n    const preparedDate = date.split('-').slice(0, 2).join('.');\n    const preparedFullDate = date.split('-').join('.');\n    const preparedLocalTime = getStringTime(localTime);\n    const flightNumber = codeShareData[0].codeShare;\n    const flightStatus = `${statusFlight(status)}${\n      actualTime\n        ? `${status === 'DP' ? ' at' : ''} ${actualTime}, ${preparedFullDate}`\n        : ''\n    }`;\n\n    const flightInfoHeaders = {\n      Date: preparedDate,\n      Time: preparedLocalTime,\n      Terminal: term,\n      Flight: flightNumber,\n      Gate: gate,\n      Stand: stand,\n    };\n    const flightInfoList: {\n      header: string;\n      value: string | undefined;\n    }[] = Object.entries(flightInfoHeaders)\n      .map(([key, value]) => ({\n        header: key,\n        value: value,\n      }))\n      .filter(({ value }) => value);\n\n    return (\n      <div className=\"container flight__container\">\n        <div className=\"flight__back-button\">\n          <NavLink to={`/${pathname}?date=${date}`}>Back</NavLink>\n        </div>\n        <div className=\"flight__info-details\">\n          <div className=\"flight__flight-number\">\n            <b>{flightNumber}</b> flies {isArrival(flight) ? 'from' : 'in'}\n          </div>\n          <div className=\"flight__city-name\">{destination}</div>\n          <div className=\"flight__title\">Flight information:</div>\n          <div className=\"flight__details\">\n            <ul>\n              {flightInfoList.map(({ header, value }) => (\n                <li key={header}>\n                  <p className=\"flight__details-label\">{header}</p>\n                  <p className=\"flight__details-value\">\n                    <b>{value}</b>\n                  </p>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"flight__status\">{flightStatus}</div>\n        </div>\n      </div>\n    );\n  }\n  return <p>Loading...</p>;\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  flight: getFlight(state),\n});\nconst connector = connect(mapStateToProps, { loadFlight });\nexport default connector(FlightDetails);\n","import React, { FC } from 'react';\nimport './Header.scss';\nimport { NavLink } from 'react-router-dom';\n\nconst Header: FC = () => {\n  return (\n    <header className=\"header\">\n      <NavLink to=\"/\">\n        <h1>Home</h1>\n      </NavLink>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { FC } from 'react';\nimport './Footer.scss';\n\nconst Footer: FC = () => {\n  return (\n    <footer className=\"footer\">\n      <img alt=\"\" src=\"./img/icons8-redux.svg\" />\n      <span>Redux 2020</span>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { FC } from 'react';\nimport './App.scss';\nimport { Switch, Route } from 'react-router-dom';\nimport HomePage from './HomePage/HomePage';\nimport FlightsTable from './FlightsTable/FlightsTable';\nimport FlightDetails from './FlightDetails/FlightDetails';\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\n\nconst App: FC = () => {\n  return (\n    <div className=\"wrapper\">\n      <Header />\n      <div className=\"wrapper-container\">\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/:direction\" component={FlightsTable} />\n          <Route exact path=\"/:direction/:flightId\" component={FlightDetails} />\n        </Switch>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { rootReducer } from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './components/App';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Provider store={store}>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}