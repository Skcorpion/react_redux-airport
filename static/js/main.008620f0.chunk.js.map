{"version":3,"sources":["utils/actionTypes.ts","components/DirectionLink.tsx","components/Direction.tsx","reducers/sortReducer.ts","reducers/fetchData.ts","reducers/index.ts","api/index.ts","actions/fetchDataActions.ts","components/Flight.tsx","utils/statusFlight.ts","components/VisibleFlights.tsx","components/DateLink.tsx","components/FlightDate.tsx","components/SearchField.tsx","actions/sortActions.ts","components/App.tsx","index.tsx"],"names":["ActionTypes","DirectionLink","children","location","useLocation","searchParams","URLSearchParams","search","date","get","query","className","activeClassName","isActive","pathname","includes","to","toString","Direction","initialState","filteredQuery","flights","arrival","departure","direction","fetching","rootReducer","combineReducers","fetchData","state","action","type","REQUESTING_DATA","RECEIVED_DATA","currentDay","Date","getDate","body","filter","flight","flightDay","timeToStand","sort","a","b","parse","timeDepExpectCalc","sortReducer","SET_FILTERED_QUERY","getFetching","fromFetchData","getVisibleFlights","createSelector","fromSort","pattern","RegExp","test","codeShareData","codeShare","airline","en","name","getData","url","fetch","response","json","data","getFlightsFromServer","receivedData","Flight","term","status","actual","localTime","actualTime","destination","toTimeString","toLocaleTimeString","hour","minute","undefined","timeLandCalc","isArrival","timeTakeofFact","preparedLocalTime","classNames","blue","statusFlight","connector","connect","loadData","dispatch","useParams","replace","currentDate","toLocaleDateString","split","join","preparedDate","reverse","useEffect","console","log","thList","map","head","i","key","length","ID","DateLink","setDateParams","calendarDate","selectedDate","onClick","reverseDate","stringifyDate","month","day","FlightDate","history","useHistory","useState","handleDateChange","getDateToParams","setDate","set","push","selected","onChange","customInput","readOnly","value","setFilteredQuery","visibleQuery","setVisibleQuery","placeholder","event","target","delete","App","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.008620f0.chunk.js","sourcesContent":["import { IFlights } from './flightsTypes';\n\n/*\n * action types\n */\nexport enum ActionTypes {\n  REQUESTING_DATA = 'REQUESTING_DATA',\n  RECEIVED_DATA = 'RECEIVED_DATA',\n  SET_FILTERED_QUERY = 'SET_FILTERED_QUERY',\n}\n/*\n * actions\n */\ninterface RequestingDataAction {\n  type: typeof ActionTypes.REQUESTING_DATA;\n}\ninterface ReceivedDataAction {\n  type: typeof ActionTypes.RECEIVED_DATA;\n  flights: IFlights;\n  direction: string;\n  date: string;\n}\ninterface SetFilteredQueryAction {\n  type: typeof ActionTypes.SET_FILTERED_QUERY;\n  filteredQuery: string;\n}\n\nexport type Actions =\n  | RequestingDataAction\n  | ReceivedDataAction\n  | SetFilteredQueryAction;\n","import React, { FC } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\ntype Props = {\n  children: string;\n};\n\nconst DirectionLink: FC<Props> = ({ children }) => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const date = searchParams.get('date') || '';\n  const query = searchParams.get('query') || '';\n\n  return (\n    <NavLink\n      className=\"flights-tabs__tab\"\n      activeClassName=\"flights-tabs__tab_active\"\n      isActive={() => {\n        if (location.pathname.includes(children)) {\n          return true;\n        }\n        return false;\n      }}\n      to={`/${children}${date || query ? `?${searchParams.toString()}` : ''}`}\n    >\n      {children}\n    </NavLink>\n  );\n};\n\nexport default DirectionLink;\n","import React, { FC } from 'react';\nimport DirectionLink from './DirectionLink';\n\nconst Direction: FC = () => {\n  return (\n    <div className=\"flights-tabs\">\n      <DirectionLink>departures</DirectionLink>\n      <DirectionLink>arrivals</DirectionLink>\n    </div>\n  );\n};\n\nexport default Direction;\n","import { ISort } from '../utils/interfaces';\nimport { Actions, ActionTypes } from '../utils/actionTypes';\n\nconst initialState = {\n  filteredQuery: ''\n};\n\nexport default (state: ISort = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.SET_FILTERED_QUERY:\n      return { ...state, filteredQuery: action.filteredQuery };\n\n    default:\n      return state;\n  }\n};\n\n//selectors\nexport const getFilteredQuery = (state: ISort) => state.filteredQuery;","import { Actions, ActionTypes } from '../utils/actionTypes';\nimport { IFetchData } from '../utils/interfaces';\n\nconst initialState: IFetchData = {\n  flights: { arrival: [], departure: [] },\n  direction: '',\n  fetching: false,\n};\n\nexport default (state: IFetchData = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.REQUESTING_DATA:\n      return { ...state, fetching: true };\n\n    case ActionTypes.RECEIVED_DATA:\n      const { flights, direction, date } = action;\n      const arrival = direction === 'arrival';\n      const currentDay = new Date(date).getDate();\n\n      return {\n        ...state,\n        flights: {\n          arrival: [...flights.body.arrival]\n            .filter((flight) => {\n              const flightDay = new Date(flight.timeToStand).getDate();\n\n              return currentDay === flightDay;\n            })\n            .sort((a, b) => {\n              return Date.parse(a.timeToStand) - Date.parse(b.timeToStand);\n            }),\n          departure: [...flights.body.departure]\n            .filter((flight) => {\n              const flightDay = new Date(flight.timeDepExpectCalc).getDate();\n\n              return currentDay === flightDay;\n            })\n            .sort((a, b) => {\n              return (\n                Date.parse(a.timeDepExpectCalc) -\n                Date.parse(b.timeDepExpectCalc)\n              );\n            }),\n        },\n        direction: arrival ? 'arrival' : 'departure',\n        fetching: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\n//selector\nexport const getFlights = (state: IFetchData) => state.flights;\nexport const getFetching = (state: IFetchData) => state.fetching;\nexport const getDirection = (state: IFetchData) => state.direction;\n","import { RootState } from '../utils/interfaces';\nimport { createSelector } from 'reselect';\nimport sortReducer, * as fromSort from './sortReducer';\nimport fetchData, * as fromFetchData from './fetchData';\nimport { combineReducers } from 'redux';\n\nexport const rootReducer = combineReducers({\n  fetchData,\n  sortReducer,\n});\n\n//selector\nexport const getFlights = (state: RootState) =>\n  fromFetchData.getFlights(state.fetchData);\nexport const getFetching = (state: RootState) =>\n  fromFetchData.getFetching(state.fetchData);\nexport const getDirection = (state: RootState) =>\n  fromFetchData.getDirection(state.fetchData);\n\nexport const getFilteredQuery = (state: RootState) =>\n  fromSort.getFilteredQuery(state.sortReducer);\n\nexport const getVisibleFlights = createSelector(\n  [getFlights, getDirection, getFilteredQuery],\n  (flights, direction, filteredQuery) => {\n    const pattern = new RegExp(filteredQuery, 'i');\n\n    if (direction === 'departure') {\n      return [\n        ...flights.departure.filter(\n          (flight) =>\n            pattern.test(flight.codeShareData[0].codeShare) ||\n            pattern.test(flight['airportToID.city_en']) ||\n            pattern.test(flight.airline.en.name)\n        ),\n      ];\n    } else if (direction === 'arrival') {\n      return [\n        ...flights.arrival.filter(\n          (flight) =>\n            pattern.test(flight.codeShareData[0].codeShare) ||\n            pattern.test(flight['airportFromID.city_en']) ||\n            pattern.test(flight.airline.en.name)\n        ),\n      ];\n    }\n\n    return [];\n  }\n);\n","import { IFlights } from '../utils/flightsTypes';\n\nconst API_URL = 'https://api.iev.aero/api/flights/';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n\nexport const getFlightsFromServer = async (date: string) => {\n  return getData<IFlights>(`${API_URL}${date}`);\n};\n","import { Actions, ActionTypes } from '../utils/actionTypes';\nimport { IFlights } from '../utils/flightsTypes';\nimport { Dispatch } from 'react';\nimport { getFlightsFromServer } from '../api';\n\n/*\n * action creators\n */\nconst requestingData = (): Actions => ({\n  type: ActionTypes.REQUESTING_DATA,\n});\nconst receivedData = (\n  flights: IFlights,\n  direction: string,\n  date: string\n): Actions => ({\n  type: ActionTypes.RECEIVED_DATA,\n  flights,\n  direction,\n  date,\n});\n\nexport const loadData = (date: string, direction: string) => {\n  return async function (dispatch: Dispatch<Actions>) {\n    dispatch(requestingData());\n\n    const flights = await getFlightsFromServer(date);\n    dispatch(receivedData(flights, direction, date));\n  };\n};\n","import React, { FC } from 'react';\nimport { Arrival, Departure } from '../utils/flightsTypes';\nimport classNames from 'classnames';\nimport { statusFlight } from '../utils/statusFlight';\n\ntype Props = {\n  flight: Arrival | Departure;\n};\n\nconst Flight: FC<Props> = ({ flight }) => {\n  function isArrival(flight: Arrival | Departure): flight is Arrival {\n    return (flight as Arrival).timeLandCalc !== undefined;\n  }\n\n  const { term, status, airline, codeShareData, actual } = flight;\n  let localTime = '',\n    actualTime = '',\n    destination = '';\n\n  const toTimeString = (date: string) => {\n    return new Date(date).toLocaleTimeString([], {\n      hour: 'numeric',\n      minute: '2-digit',\n    });\n  };\n\n  if (isArrival(flight)) {\n    localTime = flight.timeToStand;\n    destination = flight['airportFromID.city_en'];\n\n    if (status === 'LN') {\n      actualTime = toTimeString(actual);\n    }\n  } else {\n    localTime = flight.timeDepExpectCalc;\n    destination = flight['airportToID.city_en'];\n\n    if (flight.timeTakeofFact && status === 'DP') {\n      actualTime = toTimeString(flight.timeTakeofFact);\n    }\n  }\n\n  const preparedLocalTime = toTimeString(localTime);\n\n  return (\n    <tr>\n      <td\n        className={classNames('flights-table__terminal-col', {\n          blue: term === 'D',\n        })}\n      >\n        <span>{term}</span>\n      </td>\n      <td>{preparedLocalTime}</td>\n      <td>{destination}</td>\n      <td>{`${statusFlight(status)} ${actualTime}`}</td>\n      <td>{airline.en.name}</td>\n      <td>{codeShareData[0].codeShare}</td>\n    </tr>\n  );\n};\n\nexport default Flight;\n","export const statusFlight = (status: Status): string => {\n  switch (status) {\n    case 'ON':\n      return 'On time';\n    case 'CX':\n      return 'Canceled';\n    case 'LN':\n      return 'Landed';\n    case 'CK':\n      return 'Check-in';\n    case 'FR':\n      return 'In flight';\n    case 'BD':\n      return 'Boarding';\n    case 'DP':\n      return 'Departed';\n    case 'DV':\n      return 'Route change';\n    case 'GC':\n      return 'Gate closed';\n    default:\n      return status;\n  }\n};\n","import React, { FC, useEffect } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { RootState } from '../utils/interfaces';\nimport { getVisibleFlights, getFetching } from '../reducers';\nimport { loadData } from '../actions';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Departure, Arrival } from '../utils/flightsTypes';\nimport Flight from './Flight';\n\nconst VisibleFlights: FC<ConnectedProps<typeof connector>> = ({\n  flights,\n  fetching,\n  loadData,\n}) => {\n  const location = useLocation();\n  const params: { direction: string } = useParams();\n  const pathname = params.direction.replace(/e?s\\b/, '');\n  const searchParams = new URLSearchParams(location.search);\n\n  const currentDate = new Date().toLocaleDateString().split('.').join('-');\n  const date = searchParams.get('date') || currentDate;\n  const preparedDate = date.split('-').reverse().join('-');\n\n  useEffect(() => {\n    console.log('reload data from:', pathname, ', date:', preparedDate);\n\n    loadData(preparedDate, pathname);\n    // eslint-disable-next-line\n  }, [pathname, preparedDate]);\n\n  const listOfHeads = [\n    'Terminal',\n    'Local time',\n    'Destination',\n    'Status',\n    'Airline',\n    'Flight',\n  ];\n  const thList = listOfHeads.map((head, i) => <th key={i}>{head}</th>);\n  if (flights.length !== 0) {\n    return (\n      <table className=\"flights-table\">\n        <thead>\n          <tr>{thList}</tr>\n        </thead>\n        <tbody>\n          {(flights as Array<Arrival | Departure>).map((flight) => (\n            <Flight key={flight.ID} flight={flight} />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n  return (\n    <div className=\"nothing-found\">\n      {fetching ? <span>Loading</span> : <span>No flights</span>}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  flights: getVisibleFlights(state),\n  fetching: getFetching(state),\n});\n\nconst connector = connect(mapStateToProps, { loadData });\nexport default connector(VisibleFlights);\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  setDateParams: (date: Date) => void;\n  calendarDate: (date: Date) => string;\n  date: Date;\n  children: React.ReactNode;\n  selectedDate: Date;\n};\n\nconst DateLink: FC<Props> = ({\n  setDateParams,\n  calendarDate,\n  date,\n  children,\n  selectedDate,\n}) => {\n  const isActive =\n    selectedDate.toLocaleDateString() === date.toLocaleDateString();\n\n  return (\n    <div\n      className={classNames('flights-dates__day', {\n        'flights-dates__day_active': isActive,\n      })}\n      onClick={() => setDateParams(date)}\n    >\n      <span>{calendarDate(date)}</span>\n      {children}\n    </div>\n  );\n};\n\nexport default DateLink;\n","import React, { FC, useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport DateLink from './DateLink';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nfunction reverseDate(date: string | null) {\n  if (date) {\n    return new Date(date.split('-').reverse().join('-'));\n  }\n  return new Date();\n}\nfunction stringifyDate(date: Date) {\n  return date.toLocaleDateString().split('.').join('-');\n}\nfunction calendarDate(date: Date) {\n  return date\n    .toLocaleDateString([], { month: 'numeric', day: 'numeric' })\n    .replace('.', '/');\n}\n\nconst FlightDate: FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n  const [selectedDate, handleDateChange] = useState(\n    reverseDate(searchParams.get('date'))\n  );\n  const setDateParams = (date: Date) => {\n    handleDateChange(reverseDate(stringifyDate(date)));\n  };\n  const getDateToParams = (day: number) => {\n    const date = new Date();\n    date.setDate(date.getDate() + day);\n\n    return date;\n  };\n\n  useEffect(() => {\n    const date = stringifyDate(selectedDate);\n    searchParams.set('date', date);\n    history.push({\n      search: searchParams.toString(),\n    });\n    // eslint-disable-next-line\n  }, [selectedDate]);\n\n  console.log(selectedDate);\n\n  return (\n    <div className=\"flights-dates__container\">\n      <DatePicker\n        selected={selectedDate}\n        onChange={(date: Date) => handleDateChange(date)}\n        customInput={\n          <div className=\"flights-calendar__container\">\n            <div className=\"flights-calendar__datepicker\">\n              <input\n                type=\"text\"\n                readOnly\n                className=\"flights-calendar__input\"\n                value={calendarDate(selectedDate)}\n              />\n            </div>\n          </div>\n        }\n      />\n      <div className=\"flights-dates__list\">\n        <DateLink\n          selectedDate={selectedDate}\n          calendarDate={calendarDate}\n          setDateParams={setDateParams}\n          date={getDateToParams(-1)}\n        >\n          Yesterday\n        </DateLink>\n        <DateLink\n          selectedDate={selectedDate}\n          calendarDate={calendarDate}\n          setDateParams={setDateParams}\n          date={getDateToParams(0)}\n        >\n          Today\n        </DateLink>\n        <DateLink\n          selectedDate={selectedDate}\n          calendarDate={calendarDate}\n          setDateParams={setDateParams}\n          date={getDateToParams(1)}\n        >\n          Tomorrow\n        </DateLink>\n      </div>\n    </div>\n  );\n};\n\nexport default FlightDate;\n","import React, { FC, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { setFilteredQuery } from '../actions';\n\nconst SearchField: FC<ConnectedProps<typeof connector>> = ({\n  setFilteredQuery,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n\n  useEffect(() => {\n    setFilteredQuery(query);\n    // eslint-disable-next-line\n  }, [query]);\n\n  const [visibleQuery, setVisibleQuery] = useState<string>(query);\n\n  const updateQuery = (value: string) => {\n    if (value) {\n      searchParams.set('query', value);\n    } else {\n      searchParams.delete('query');\n    }\n\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  const handleQueryUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    setVisibleQuery(value);\n  };\n\n  const handleButtonQueryUpdate = () => {\n    updateQuery(visibleQuery);\n  };\n\n  return (\n    <div className=\"flights__search-field search-field\">\n      <h2 className=\"search-field__title\">SEARCH FLIGHT</h2>\n      <div className=\"search-field__search-line\">\n        <input\n          className=\"search-field__input\"\n          type=\"text\"\n          placeholder=\"Airline, destination or flight #\"\n          value={visibleQuery}\n          onChange={handleQueryUpdate}\n        />\n        <button\n          className=\"search-field__button\"\n          onClick={handleButtonQueryUpdate}\n        >\n          Search\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst connector = connect(null, { setFilteredQuery });\nexport default connector(SearchField);\n","import { ActionTypes, Actions } from '../utils/actionTypes';\n\n/*\n * action creators\n */\nexport const setFilteredQuery = (filteredQuery: string): Actions => ({\n  type: ActionTypes.SET_FILTERED_QUERY,\n  filteredQuery,\n});","import React, { FC } from 'react';\nimport './App.css';\nimport Direction from './Direction';\nimport VisibleFlights from './VisibleFlights';\nimport FlightDate from './FlightDate';\nimport SearchField from './SearchField';\n\nconst App: FC = () => {\n  return (\n    <div className=\"flights__container\">\n      <SearchField />\n      <Direction />\n      <FlightDate />\n      <VisibleFlights />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport { rootReducer } from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route exact path=\"/:direction\" component={App} />\r\n        </Switch>\r\n      </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}